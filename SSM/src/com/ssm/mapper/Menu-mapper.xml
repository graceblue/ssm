<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssm.mapper.MenuDao">
	<select id="getAllMenus" resultType="com.ssm.domain.BaseMenu" resultMap="BaseMenu.BaseMenuResultMap">
		select * from base_menu order by
		menu_sort_cd,menu_id
	</select>

	<select id="selectMenuById" parameterType="string" resultType="com.ssm.domain.BaseMenu" resultMap="BaseMenu.BaseMenuResultMap">
		select * from base_menu where menu_id = ${menuId} order by menu_sort_cd,menu_id
	</select>

	<insert id="addMenu" parameterType="com.ssm.domain.BaseMenu">
		<selectKey order="BEFORE" resultType="int" keyProperty="menuId">SELECT seq_base_menu.nextval as userId FROM DUAL
		</selectKey>
		insert into base_menu (MENU_ID,NAME,TITLE,PARENT_MENU_ID,URI,MENU_TYPE_CD,MENU_SORT_CD,MENU_DESC,ICON,IS_LAST_MENU,PRODUCE_SCENE,MANAGE_SCENE)
		values
		(${menuId},
		#{name,jdbcType=VARCHAR},
		#{title,jdbcType=VARCHAR},
		#{parentMenuId,jdbcType=VARCHAR},
		#{uri,jdbcType=VARCHAR},
		#{menuTypeCd,jdbcType=VARCHAR},
		(select max(menu_sort_cd)+1 from base_menu m where m.parent_menu_id = ${parentMenuId}),
		#{desc,jdbcType=VARCHAR},
		#{icon,jdbcType=VARCHAR},
		#{isLastMenu,jdbcType=VARCHAR},
		#{produceScene,jdbcType=VARCHAR},
		#{manageScene,jdbcType=VARCHAR}
		)
	</insert>

	<update id="editMenu" parameterType="com.ssm.domain.BaseMenu">
		update base_menu bm 
		<trim prefix="" prefixOverrides=",">
			<set>
				<if test="name != null ">name=#{name,jdbcType=VARCHAR},</if>
				<if test="title != null ">title=#{title,jdbcType=VARCHAR},</if>
				<if test="parentMenuId != null">parent_menu_id = #{parentMenuId,jdbcType=VARCHAR},</if>
				<if test="uri != null">uri = #{uri,jdbcType=VARCHAR},</if>
				<if test="menuTypeCd != null">menu_type_cd = #{menuTypeCd,jdbcType=VARCHAR},</if>
				<if test="menuSortCd != null">menu_sort_cd = #{menuSortCd,jdbcType=VARCHAR},</if>
				<if test="icon != null">icon = #{icon,jdbcType=VARCHAR},</if>
				<if test="desc != null">menu_desc = #{desc,jdbcType=VARCHAR},</if>
				<if test="manageScene != null">manage_scene = #{manageScene,jdbcType=VARCHAR},</if>
				<if test="produceScene != null">produce_scene = #{produceScene,jdbcType=VARCHAR}</if>
			</set>
			where menu_id=#{menuId}
		</trim>
	</update>
	
	<select id="selectMenuByUserId" parameterType="string" resultType="com.ssm.domain.BaseMenu" >
		select distinct  c.menu_id  menuId, c.name name, c.uri uri, c.menu_sort_cd menuSortCd,c.parent_menu_id parentMenuId,c.is_last_menu   lastMenu
		  from base_user a, base_role_2_menu b, base_menu c, base_user_2_role d
		where  1=1
			<if test="userId != null or userId != ''">  
		        and    a.user_id =   ${userId}
		   </if> 
		   and a.user_id = d.user_id
		   and d.role_id = b.role_id
		   and c.menu_id = b.menu_id
		   <!-- <if test="menuId != null or menuId != ''">  
		       and  c.parent_menu_id = ${menuId}
		   </if> -->		   
		   order by c.menu_id,c.parent_menu_id asc
	</select>
	
	<select id="selecAlltMenuByUserId" parameterType="string" resultType="com.ssm.domain.BaseMenu" >
		    select distinct c.menu_id        menuId,
                  c.name           name,
                  c.uri            uri,
                  c.menu_sort_cd   menuSortCd,
                  c.parent_menu_id parentMenuId
		    from (select *
		            from base_menu cc
		           start with cc.parent_menu_id = ${menuId}
		          connect by prior cc.menu_id = cc.parent_menu_id
		           order by cc.menu_sort_cd asc) c
		    left join base_role_2_menu b
		      on c.menu_id = b.menu_id
		    left join base_user_2_role d
		      on b.role_id = d.role_id
		    left join base_user a
		      on d.user_id = a.user_id
		      <if test="userId != null and userId != ''">  
		        and a.user_id = ${userId}
		     </if> 
	</select>
	
	<select id="selectMenuByParentId" parameterType="string" resultType="com.ssm.domain.BaseMenu" resultMap="BaseMenu.BaseMenuResultMap">
		select * from base_menu where parent_menu_id = ${menuId} order by menu_sort_cd,menu_id
	</select>
	
	<delete id ="deleteRoleMenu" parameterType="string">
		delete from base_role_2_menu where menu_id = ${menuId}
	</delete>
	
	<delete id ="deleteMenu" parameterType="string">
		delete from base_menu where menu_id = ${menuId}
	</delete>
	
	<select id="getMenusByRoleId" parameterType="string" resultType="com.ssm.domain.BaseMenu" resultMap="BaseMenu.BaseMenuResultMap">
		select bm.* from base_role_2_menu br2m join base_menu bm on bm.menu_id = br2m.menu_id where role_Id = ${roleId} order by menu_sort_cd,bm.menu_id
	</select>
	
	<select id="getMenusByUser" parameterType="string" resultType="com.ssm.domain.BaseMenu" resultMap="BaseMenu.BaseMenuResultMap">
		select distinct bm.* from base_role_2_menu br2m join base_menu bm  on bm.menu_id = br2m.menu_id
 			where role_Id in  (select bu2r.role_id from base_user_2_role bu2r where bu2r.user_id=${userId})
 			order by menu_sort_cd, bm.menu_id
	</select>
	
	<delete id ="deleteRoleMenuByRole" parameterType="string">
		delete from base_role_2_menu where role_id = ${roleId}
	</delete>
	
	<insert id="saveRoleMenus" parameterType="java.util.List">  
  	insert into base_role_2_menu (role_id,menu_id) 
  	<foreach collection="list" item="item" index="index" separator="union all">
	 select #{item.roleId,jdbcType=VARCHAR},
	 #{item.menuId,jdbcType=VARCHAR} from dual
	 </foreach>
	</insert>
	
	<select id="selectMenuType" resultType="map">
		select * from base_menu_type
	</select>
	
	<select id="getParentMenusById" parameterType="string" resultType="com.ssm.domain.BaseMenu" resultMap="BaseMenu.BaseMenuResultMap">
		select * from base_menu bm
		connect by  bm.menu_id = prior bm.parent_menu_id start with 
				<if test="menuId != null and menuId != ''">  
		            bm.menu_id = ${menuId}  
		        </if>  
		        <if test="menuId == null or menuId == ''">  
		            bm.menu_id is null  
		        </if>  
		order by bm.menu_sort_cd,bm.menu_id
	</select>
	
	<select id="selectHandlelistPage" parameterType="map" resultType="map">
		select distinct c.*
		  from base_user             a,
		       base_role_2_menu      b,
		       main_wait_handle_info c,
		       base_user_2_role      d
		 where 1 = 1
		   and a.user_id = #{user_id}
		   and a.user_id = d.user_id
		   and d.role_id = b.role_id
		   and c.menu_id = b.menu_id
		 order by c.handle_id asc
	</select>
	
	<insert id="saveHandleInfo" parameterType="map">
		<selectKey order="BEFORE" resultType="string" keyProperty="ID">SELECT MAIN_WAIT_HANDLE_INFO_SEQUENCE.nextval as ID FROM DUAL
		</selectKey>
		insert into MAIN_WAIT_HANDLE(
			HANDLE_ID,
			HANDLE_NAME,
			HANDLE_HREF,
			HANDLE_PICTURE,
			HANDLE_FLAG,
			USER_ID,
			CREATE_DATE,
			HANDLE_COUNT,
			RELATIVE_HANDLE_ID
		)
		values(
			#{ID},
			#{handle_name},
			#{handle_href},
			#{handle_picture},
			#{handle_flag},
			#{user_id},
			sysdate,
			#{handle_count},
			#{relative_handle_id}
		)
	</insert>
	
	<select id="selectHasHandledlist" parameterType="map" resultType="map">
		select *
		  from (select *
		          from MAIN_WAIT_HANDLE
		         where user_id = #{user_id}
		         order by create_date desc)
		 where rownum &lt;= (select c.handle_count
		                    from (select handle_count
		                            from MAIN_WAIT_HANDLE t
		                           where user_id = #{user_id}
		                           order by t.create_date desc, t.handle_count desc) c
		                   where rownum &lt;2)
		 order by handle_count
	</select>
	
	<select id="selectMenuByData" parameterType="map" resultType="com.ssm.domain.BaseMenu" >
		select distinct  c.menu_id  menuId, c.name name, c.uri uri, c.menu_sort_cd menuSortCd,c.parent_menu_id parentMenuId,c.is_last_menu   lastMenu
		  from base_user a, base_role_2_menu b, base_menu c, base_user_2_role d
		where  1=1
			<if test="userId != null and userId != ''">  
		        and    a.user_id =   ${userId}
		   </if> 
		   <if test="manageScene != null and manageScene != ''">  
		       and  c.manage_scene = #{manageScene}
		   </if>
		   <if test="produceScene != null and produceScene != ''">  
		       and  c.produce_scene = #{produceScene}
		   </if>
		   and a.user_id = d.user_id
		   and d.role_id = b.role_id
		   and c.menu_id = b.menu_id	   
		   order by c.menu_id,c.parent_menu_id
	</select>
	
	<select id="selectSecHandledlist" parameterType="map" resultType="map">
		select *
		  from (select *
		          from MAIN_WAIT_HANDLE_SECOND
		         where user_id = #{user_id}
		         order by create_date desc)
		 where rownum &lt;= (select c.handle_count
		                    from (select handle_count
		                            from MAIN_WAIT_HANDLE_SECOND t
		                           where user_id = #{user_id}
		                           order by t.create_date desc, t.handle_count desc) c
		                   where rownum &lt;2)
		 order by handle_count
	</select>
	
	<select id="selectnewHandlelistPage" parameterType="map" resultType="map">
		select distinct c.*
		  from base_user             a,
		       base_role_2_menu      b,
		       main_wait_handleinfo_second c,
		       base_user_2_role      d
		 where 1 = 1
		   and a.user_id = #{user_id}
		   and a.user_id = d.user_id
		   and d.role_id = b.role_id
		   and c.menu_id = b.menu_id
		 order by c.handle_id
	</select>
</mapper>