<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssm.mapper.RoleDao">

	<select id="getAllRoles" parameterType="com.ssm.domain.BaseRole" resultMap="BaseRole.BaseRoleResultMap"
		resultType="com.ssm.domain.BaseRole">
		select br.*,bu.user_name,brt.name role_type_cd_name from Base_Role br
		join base_user bu on br.create_op =
		bu.user_id
		join base_role_type brt on brt.role_type_cd = br.role_type_cd
		where BR.IS_DELETE = 0 order by br.role_name
	</select>

	<select id="selectRolesByCondlistPage" parameterType="com.ssm.domain.BaseRole" resultMap="BaseRole.BaseRoleResultMap"
		resultType="com.ssm.domain.BaseRole">
		select br.*,bu.user_name,brt.name role_type_cd_name from Base_Role br
		join base_user bu on br.create_op = bu.user_id
		join base_role_type brt on brt.role_type_cd = br.role_type_cd
		<trim prefix="where" prefixOverrides="and |or">
			<if test="role.roleName != null and role.roleName != ''">
				and br.role_name like '%'||#{role.roleName}||'%'
			</if>
			<if test="role.roleTypeCd != null and role.roleTypeCd != ''">
				and br.role_Type_Cd =#{role.roleTypeCd}
			</if>
			<if test="role.createOp != null and role.createOp != ''">
				and br.create_Op =#{role.createOp}
			</if>
			AND BR.IS_DELETE = 0 order by br.role_name
		</trim>
	</select>

	<select id="selectUsersByRole" parameterType="string" resultMap="BaseUser.BaseUserResultMap" resultType="com.ssm.domain.BaseUser">
		select tab1.*,bo.org_id,bo.org_name from
		(select bu.*
		from base_user bu
		join base_user_2_role bu2r
		on bu2r.user_id = bu.user_id
		join Base_Role br
		on br.role_id = bu2r.role_id
		where br.role_id=#{roleId}
		and bu.is_delete = 0
		and br.is_delete = 0)tab1
		join BASE_USER_2_ORGANIZATION bu2o
		on bu2o.user_id = tab1.user_id
		join base_organization bo
		on bo.org_id = bu2o.organizational_id
	</select>

	<select id="selectPositionsByRole" parameterType="string" resultMap="BasePosition.BasePositionResultMap">
		select bp.*,bpt.name position_type_cd_name,bo.org_id,bo.org_name
		from base_position bp
		left join BASE_POSITION_TYPE bpt
		on bpt.position_type_cd = bp.position_type_cd
		join BASE_POSITION_2_ORGANIZATION bp2o
		on bp2o.position_id = bp.position_id
		join base_organization bo
		on bo.org_id = bp2o.organizational_id
		join base_position_2_role bp2r
		on bp2r.position_id = bp.position_id
		join base_role br
		on br.role_id = bp2r.role_id
		where br.role_id=#{roleId}
		and bp.is_delete = 0
		and bo.is_delete = 0
		and br.is_delete = 0
	</select>

	<update id="deleteRole" parameterType="java.lang.Integer">
		UPDATE BASE_ROLE BR SET BR.IS_DELETE = 1 WHERE BR.ROLE_ID = #{roleId,
		jdbcType = INTEGER}
	</update>

	<select id="getRoleTypeList" resultType="map">
		select * from base_role_type
	</select>

	<select id="getRoleById" resultType="com.ssm.domain.BaseRole" resultMap="BaseRole.BaseRoleResultMap">
		select * from base_role
		where role_id = ${roleId}
	</select>

	<insert id="addRole" parameterType="com.ssm.domain.BaseRole">
		<selectKey order="BEFORE" resultType="string" keyProperty="roleId">SELECT seq_role.nextval as userId FROM DUAL
		</selectKey>
		insert into base_role(role_id,create_op,role_name,role_type_cd,role_desc,is_delete)
		values
		(#{roleId, jdbcType =
		VARCHAR},
		#{createOp, jdbcType = VARCHAR},
		#{roleName, jdbcType = VARCHAR},
		#{roleTypeCd, jdbcType = VARCHAR},
		#{roleDesc, jdbcType = VARCHAR},
		0
		)
	</insert>
	<update id="updateRole" parameterType="com.ssm.domain.BaseRole">
		update base_role
		set
		create_op = #{createOp, jdbcType = VARCHAR},
		role_name =
		#{roleName, jdbcType = VARCHAR},
		role_type_cd = #{roleTypeCd, jdbcType = VARCHAR},
		role_desc = #{roleDesc, jdbcType =
		VARCHAR},
		is_delete = #{isDelete, jdbcType = VARCHAR}
		where role_id = ${roleId}
	</update>

	<select id="getRolesByUser" parameterType="int" resultType="com.ssm.domain.BaseRole" resultMap="BaseRole.BaseRoleResultMap">
		select u2r.user_id,u2r.start_date,u2r.end_date,br.*,bu.useR_NAME,brt.name role_type_cd_name from base_user_2_role u2r
		join base_role br on br.role_id = u2r.role_id
		join base_user bu on br.create_op = bu.user_id
		join base_role_type brt on
		brt.role_type_cd = br.role_type_cd
		where u2r.user_id = ${userId} and (u2r.end_date is null or u2r.end_date>sysdate)
		and
		br.is_delete =0 order by br .role_name
	</select>

	<select id="getRolesByPosition" parameterType="int" resultType="com.ssm.domain.BaseRole" resultMap="BaseRole.BaseRoleResultMap">
		select p2r.position_id,p2r.start_date,p2r.end_date,br.*,bp.position_name,brt.name role_type_cd_name from
		base_position_2_role p2r
		join base_role br on br.role_id = p2r.role_id
		join base_position bp on bp.position_id = p2r.position_id
		join base_role_type brt on brt.role_type_cd = br.role_type_cd
		where p2r.position_id = ${positionId} 
		and (p2r.end_date is null or p2r.end_date>sysdate) 
		and br.is_delete =0 order by br.role_name
	</select>

	<delete id="deleteUserRole" parameterType="string">
		delete from base_user_2_role where user_id in (${userId}) and role_id
		in( ${roleId})
	</delete>

	<delete id="deletePositionRole" parameterType="string">
		delete from base_position_2_role where position_id in
		(${positionId}) and role_id in( ${roleId})
	</delete>

	<insert id="saveUserRole" parameterType="string">
		MERGE INTO base_user_2_role p
		USING (select ${roleId} role_id,${userId} user_id from dual) np
		ON (p.role_id = np.role_id and p.user_id = np.user_id)
		WHEN MATCHED THEN
		UPDATE
		SET p.start_date = to_date(#{startDate,jdbcType=VARCHAR},'YYYY-MM-DD HH24:MI:SS'),
		p.end_date = decode(#{endDate,jdbcType=VARCHAR},'','',null,'',to_date(#{endDate,jdbcType=VARCHAR},'YYYY-MM-DD HH24:MI:SS'))
		WHERE p.user_id = ${userId} and p.role_id=${roleId}
		WHEN NOT MATCHED THEN
		INSERT
		VALUES
		(
		${roleId},${userId},decode(#{startDate,jdbcType=VARCHAR},'','',null,'',to_date(#{startDate,jdbcType=VARCHAR},'YYYY-MM-DD
		HH24:MI:SS')),decode(#{endDate,jdbcType=VARCHAR},'','',null,'',to_date(#{endDate,jdbcType=VARCHAR},'YYYY-MM-DD
		HH24:MI:SS')))
	</insert>

	<insert id="savePositionRole" parameterType="string">
		MERGE INTO base_position_2_role p
		USING (select ${roleId} role_id,${positionId} position_id from dual) np
		ON (p.role_id = np.role_id and p.position_id = np.position_id)
		WHEN MATCHED THEN
		UPDATE
		SET p.start_date = to_date(#{startDate,jdbcType=VARCHAR},'YYYY-MM-DD HH24:MI:SS'),
		p.end_date = decode(#{endDate,jdbcType=VARCHAR},'','',null,'',to_date(#{endDate,jdbcType=VARCHAR},'YYYY-MM-DD HH24:MI:SS'))
		WHEN NOT MATCHED THEN
		INSERT
		VALUES
		(
		${roleId},${positionId},decode(#{startDate,jdbcType=VARCHAR},'','',null,'',to_date(#{startDate,jdbcType=VARCHAR},'YYYY-MM-DD
		HH24:MI:SS')),decode(#{endDate,jdbcType=VARCHAR},'','',null,'',to_date(#{endDate,jdbcType=VARCHAR},'YYYY-MM-DD
		HH24:MI:SS')))
	</insert>

	<insert id="betchInsertUserRole">
		insert into base_user_2_role
		SELECT r.role_id,BU.USER_ID,sysdate,r.end_date
		FROM base_user_2_role r,BASE_USER BU
		WHERE R.user_id = #{fromUserId}
		AND BU.USER_ID IN(
		<foreach collection="copyUserId" item="item" index="index" separator=",">
			#{item,jdbcType=VARCHAR}
		</foreach>
		)
		AND r.role_id in(
		<foreach collection="copyRole" item="item" index="index" separator=",">
			#{item,jdbcType=VARCHAR}
		</foreach>
		)
		AND NOT EXISTS (SELECT 1
		FROM base_user_2_role bu2r
		WHERE bu2r.user_id = BU.USER_ID
		AND bu2r.role_id = r.role_id)
	</insert>

	<insert id="betchInsertPositionRole">
		insert into base_position_2_role
		SELECT r.role_id,bp.position_id,sysdate,r.end_date
		FROM base_position_2_role r,base_position bp
		WHERE r.position_id = #{fromPositionId}
		AND bp.position_id in
		<foreach collection="copyPositionId" item="item" index="index" open="(" separator="," close=")">
			#{item,jdbcType=VARCHAR}
		</foreach>
		AND r.role_id in
		<foreach collection="copyRole" item="item" index="index" open="(" separator="," close=")">
			#{item,jdbcType=VARCHAR}
		</foreach>
		AND NOT EXISTS (SELECT 1
		FROM base_position_2_role bp2r
		WHERE bp2r.position_id = bp.position_id
		AND bp2r.role_id = r.role_id)
	</insert>

	<select id="getUsersByRolelistPage" resultMap="BaseUser.BaseUserResultMap" resultType="com.ssm.domain.BaseUser">
		SELECT bu.*,BO.ORG_ID,BO.ORG_NAME,sa.name as areaName
		FROM base_role br
		JOIN base_user_2_role u2r
		ON u2r.role_id = br.role_id
		JOIN base_user bu
		ON bu.user_id = u2r.user_id
		join BASE_USER_2_ORGANIZATION bu2o
		on bu2o.user_id = bu.user_id
		join base_organization bo
		on bo.org_id = bu2o.organizational_id
		join spc_area sa on bo.area_id=sa.area_id 
		WHERE br.is_delete = 0
		AND bu.is_delete = 0
		AND bo.is_delete = 0
		AND br.role_id = #{roleId}
	</select>

	<!-- <select id="getPositionsByRolelistPage" resultMap="BasePosition.BasePositionResultMap"> select bp.*, bpt.name position_type_cd_name, 
		bo.org_id from base_role br join base_position_2_role p2r on p2r.role_id = br.role_id join base_position bp on bp.position_id 
		= p2r.position_id left join base_position_type bpt on bpt.position_type_cd = bp.position_type_cd join base_position_2_organization 
		bp2o on bp2o.position_id = bp.position_id join base_organization bo on bo.org_id = bp2o.organizational_id where br.is_delete 
		= 0 and bp.is_delete = 0 and bo.is_delete = 0 and br.role_id = #{roleId} </select> -->

	<select id="getPositionsByRolelistPage" resultMap="BasePosition.BasePositionResultMap">
		select bp.*,
			(select o.org_name from base_organization o,base_position_2_organization p2o 
			where o.org_id=p2o.org_id and p2o.position_id= bp.position_id)  as org_name 
			from base_position bp
		join base_position_2_role bp2r
		on bp2r.position_id=bp.position_id 
		where bp2r.role_id= #{roleId} and bp.is_delete = 0
	</select>
	
	<select id ="getAllPositions" parameterType="com.ssm.domain.BasePosition" resultMap="BasePosition.BasePositionResultMap">
		select bp.*  from base_position bp
	    join base_user bu on to_char(bu.user_id)=bp.position_code
	  <!--   join base_position_type bpt on bpt.position_type_cd=bp.position_type_cd -->
	    where bp.is_delete=0 order by bp.position_name
	</select>
	<select id="getRoleByRoleName" resultType="com.ssm.domain.BaseRole" resultMap="BaseRole.BaseRoleResultMap">
		select * from base_role
		where role_name = #{roleName}
	</select>

</mapper>